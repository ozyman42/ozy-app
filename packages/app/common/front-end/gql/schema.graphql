schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "steps"
  """
  delete_steps(
    """filter the rows which have to be deleted"""
    where: steps_bool_exp!
  ): steps_mutation_response

  """
  delete single row from the table: "steps"
  """
  delete_steps_by_pk(id: String!): steps

  """
  delete data from the table: "trading_exchanges"
  """
  delete_trading_exchanges(
    """filter the rows which have to be deleted"""
    where: trading_exchanges_bool_exp!
  ): trading_exchanges_mutation_response

  """
  delete single row from the table: "trading_exchanges"
  """
  delete_trading_exchanges_by_pk(user_id: Int!): trading_exchanges

  """
  insert data into the table: "steps"
  """
  insert_steps(
    """the rows to be inserted"""
    objects: [steps_insert_input!]!

    """upsert condition"""
    on_conflict: steps_on_conflict
  ): steps_mutation_response

  """
  insert a single row into the table: "steps"
  """
  insert_steps_one(
    """the row to be inserted"""
    object: steps_insert_input!

    """upsert condition"""
    on_conflict: steps_on_conflict
  ): steps

  """
  insert data into the table: "trading_exchanges"
  """
  insert_trading_exchanges(
    """the rows to be inserted"""
    objects: [trading_exchanges_insert_input!]!

    """upsert condition"""
    on_conflict: trading_exchanges_on_conflict
  ): trading_exchanges_mutation_response

  """
  insert a single row into the table: "trading_exchanges"
  """
  insert_trading_exchanges_one(
    """the row to be inserted"""
    object: trading_exchanges_insert_input!

    """upsert condition"""
    on_conflict: trading_exchanges_on_conflict
  ): trading_exchanges

  """
  update data of the table: "steps"
  """
  update_steps(
    """increments the numeric columns with given value of the filtered values"""
    _inc: steps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: steps_set_input

    """filter the rows which have to be updated"""
    where: steps_bool_exp!
  ): steps_mutation_response

  """
  update single row of the table: "steps"
  """
  update_steps_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: steps_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: steps_set_input
    pk_columns: steps_pk_columns_input!
  ): steps

  """
  update multiples rows of table: "steps"
  """
  update_steps_many(
    """updates to execute, in order"""
    updates: [steps_updates!]!
  ): [steps_mutation_response]

  """
  update data of the table: "trading_exchanges"
  """
  update_trading_exchanges(
    """increments the numeric columns with given value of the filtered values"""
    _inc: trading_exchanges_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: trading_exchanges_set_input

    """filter the rows which have to be updated"""
    where: trading_exchanges_bool_exp!
  ): trading_exchanges_mutation_response

  """
  update single row of the table: "trading_exchanges"
  """
  update_trading_exchanges_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: trading_exchanges_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: trading_exchanges_set_input
    pk_columns: trading_exchanges_pk_columns_input!
  ): trading_exchanges

  """
  update multiples rows of table: "trading_exchanges"
  """
  update_trading_exchanges_many(
    """updates to execute, in order"""
    updates: [trading_exchanges_updates!]!
  ): [trading_exchanges_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "steps"
  """
  steps(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): [steps!]!

  """
  fetch aggregated fields from the table: "steps"
  """
  steps_aggregate(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): steps_aggregate!

  """fetch data from the table: "steps" using primary key columns"""
  steps_by_pk(id: String!): steps

  """
  fetch data from the table: "trading_exchanges"
  """
  trading_exchanges(
    """distinct select on columns"""
    distinct_on: [trading_exchanges_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trading_exchanges_order_by!]

    """filter the rows returned"""
    where: trading_exchanges_bool_exp
  ): [trading_exchanges!]!

  """
  fetch aggregated fields from the table: "trading_exchanges"
  """
  trading_exchanges_aggregate(
    """distinct select on columns"""
    distinct_on: [trading_exchanges_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trading_exchanges_order_by!]

    """filter the rows returned"""
    where: trading_exchanges_bool_exp
  ): trading_exchanges_aggregate!

  """
  fetch data from the table: "trading_exchanges" using primary key columns
  """
  trading_exchanges_by_pk(user_id: Int!): trading_exchanges
}

"""
columns and relationships of "steps"
"""
type steps {
  end_time: String!
  id: String!
  start_time: String!
  steps: Int!
  user_id: Int!
}

"""
aggregated selection of "steps"
"""
type steps_aggregate {
  aggregate: steps_aggregate_fields
  nodes: [steps!]!
}

"""
aggregate fields of "steps"
"""
type steps_aggregate_fields {
  avg: steps_avg_fields
  count(columns: [steps_select_column!], distinct: Boolean): Int!
  max: steps_max_fields
  min: steps_min_fields
  stddev: steps_stddev_fields
  stddev_pop: steps_stddev_pop_fields
  stddev_samp: steps_stddev_samp_fields
  sum: steps_sum_fields
  var_pop: steps_var_pop_fields
  var_samp: steps_var_samp_fields
  variance: steps_variance_fields
}

"""aggregate avg on columns"""
type steps_avg_fields {
  steps: Float
  user_id: Float
}

"""
Boolean expression to filter rows from the table "steps". All fields are combined with a logical 'AND'.
"""
input steps_bool_exp {
  _and: [steps_bool_exp!]
  _not: steps_bool_exp
  _or: [steps_bool_exp!]
  end_time: String_comparison_exp
  id: String_comparison_exp
  start_time: String_comparison_exp
  steps: Int_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "steps"
"""
enum steps_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  steps_pkey
}

"""
input type for incrementing numeric columns in table "steps"
"""
input steps_inc_input {
  steps: Int
  user_id: Int
}

"""
input type for inserting data into table "steps"
"""
input steps_insert_input {
  end_time: String
  id: String
  start_time: String
  steps: Int
  user_id: Int
}

"""aggregate max on columns"""
type steps_max_fields {
  end_time: String
  id: String
  start_time: String
  steps: Int
  user_id: Int
}

"""aggregate min on columns"""
type steps_min_fields {
  end_time: String
  id: String
  start_time: String
  steps: Int
  user_id: Int
}

"""
response of any mutation on the table "steps"
"""
type steps_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [steps!]!
}

"""
on_conflict condition type for table "steps"
"""
input steps_on_conflict {
  constraint: steps_constraint!
  update_columns: [steps_update_column!]! = []
  where: steps_bool_exp
}

"""Ordering options when selecting data from "steps"."""
input steps_order_by {
  end_time: order_by
  id: order_by
  start_time: order_by
  steps: order_by
  user_id: order_by
}

"""primary key columns input for table: steps"""
input steps_pk_columns_input {
  id: String!
}

"""
select columns of table "steps"
"""
enum steps_select_column {
  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  start_time

  """column name"""
  steps

  """column name"""
  user_id
}

"""
input type for updating data in table "steps"
"""
input steps_set_input {
  end_time: String
  id: String
  start_time: String
  steps: Int
  user_id: Int
}

"""aggregate stddev on columns"""
type steps_stddev_fields {
  steps: Float
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type steps_stddev_pop_fields {
  steps: Float
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type steps_stddev_samp_fields {
  steps: Float
  user_id: Float
}

"""
Streaming cursor of the table "steps"
"""
input steps_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: steps_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input steps_stream_cursor_value_input {
  end_time: String
  id: String
  start_time: String
  steps: Int
  user_id: Int
}

"""aggregate sum on columns"""
type steps_sum_fields {
  steps: Int
  user_id: Int
}

"""
update columns of table "steps"
"""
enum steps_update_column {
  """column name"""
  end_time

  """column name"""
  id

  """column name"""
  start_time

  """column name"""
  steps

  """column name"""
  user_id
}

input steps_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: steps_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: steps_set_input

  """filter the rows which have to be updated"""
  where: steps_bool_exp!
}

"""aggregate var_pop on columns"""
type steps_var_pop_fields {
  steps: Float
  user_id: Float
}

"""aggregate var_samp on columns"""
type steps_var_samp_fields {
  steps: Float
  user_id: Float
}

"""aggregate variance on columns"""
type steps_variance_fields {
  steps: Float
  user_id: Float
}

type subscription_root {
  """
  fetch data from the table: "steps"
  """
  steps(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): [steps!]!

  """
  fetch aggregated fields from the table: "steps"
  """
  steps_aggregate(
    """distinct select on columns"""
    distinct_on: [steps_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [steps_order_by!]

    """filter the rows returned"""
    where: steps_bool_exp
  ): steps_aggregate!

  """fetch data from the table: "steps" using primary key columns"""
  steps_by_pk(id: String!): steps

  """
  fetch data from the table in a streaming manner: "steps"
  """
  steps_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [steps_stream_cursor_input]!

    """filter the rows returned"""
    where: steps_bool_exp
  ): [steps!]!

  """
  fetch data from the table: "trading_exchanges"
  """
  trading_exchanges(
    """distinct select on columns"""
    distinct_on: [trading_exchanges_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trading_exchanges_order_by!]

    """filter the rows returned"""
    where: trading_exchanges_bool_exp
  ): [trading_exchanges!]!

  """
  fetch aggregated fields from the table: "trading_exchanges"
  """
  trading_exchanges_aggregate(
    """distinct select on columns"""
    distinct_on: [trading_exchanges_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [trading_exchanges_order_by!]

    """filter the rows returned"""
    where: trading_exchanges_bool_exp
  ): trading_exchanges_aggregate!

  """
  fetch data from the table: "trading_exchanges" using primary key columns
  """
  trading_exchanges_by_pk(user_id: Int!): trading_exchanges

  """
  fetch data from the table in a streaming manner: "trading_exchanges"
  """
  trading_exchanges_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [trading_exchanges_stream_cursor_input]!

    """filter the rows returned"""
    where: trading_exchanges_bool_exp
  ): [trading_exchanges!]!
}

"""
columns and relationships of "trading_exchanges"
"""
type trading_exchanges {
  bybit_key: String

  """
  A computed field, executes function "has_bybit_key"
  """
  has_bybit_key: Boolean
  user_id: Int!
}

"""
aggregated selection of "trading_exchanges"
"""
type trading_exchanges_aggregate {
  aggregate: trading_exchanges_aggregate_fields
  nodes: [trading_exchanges!]!
}

"""
aggregate fields of "trading_exchanges"
"""
type trading_exchanges_aggregate_fields {
  avg: trading_exchanges_avg_fields
  count(columns: [trading_exchanges_select_column!], distinct: Boolean): Int!
  max: trading_exchanges_max_fields
  min: trading_exchanges_min_fields
  stddev: trading_exchanges_stddev_fields
  stddev_pop: trading_exchanges_stddev_pop_fields
  stddev_samp: trading_exchanges_stddev_samp_fields
  sum: trading_exchanges_sum_fields
  var_pop: trading_exchanges_var_pop_fields
  var_samp: trading_exchanges_var_samp_fields
  variance: trading_exchanges_variance_fields
}

"""aggregate avg on columns"""
type trading_exchanges_avg_fields {
  user_id: Float
}

"""
Boolean expression to filter rows from the table "trading_exchanges". All fields are combined with a logical 'AND'.
"""
input trading_exchanges_bool_exp {
  _and: [trading_exchanges_bool_exp!]
  _not: trading_exchanges_bool_exp
  _or: [trading_exchanges_bool_exp!]
  bybit_key: String_comparison_exp
  has_bybit_key: Boolean_comparison_exp
  user_id: Int_comparison_exp
}

"""
unique or primary key constraints on table "trading_exchanges"
"""
enum trading_exchanges_constraint {
  """
  unique or primary key constraint on columns "user_id"
  """
  trading_exchanges_pkey
}

"""
input type for incrementing numeric columns in table "trading_exchanges"
"""
input trading_exchanges_inc_input {
  user_id: Int
}

"""
input type for inserting data into table "trading_exchanges"
"""
input trading_exchanges_insert_input {
  bybit_key: String
  user_id: Int
}

"""aggregate max on columns"""
type trading_exchanges_max_fields {
  bybit_key: String
  user_id: Int
}

"""aggregate min on columns"""
type trading_exchanges_min_fields {
  bybit_key: String
  user_id: Int
}

"""
response of any mutation on the table "trading_exchanges"
"""
type trading_exchanges_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [trading_exchanges!]!
}

"""
on_conflict condition type for table "trading_exchanges"
"""
input trading_exchanges_on_conflict {
  constraint: trading_exchanges_constraint!
  update_columns: [trading_exchanges_update_column!]! = []
  where: trading_exchanges_bool_exp
}

"""Ordering options when selecting data from "trading_exchanges"."""
input trading_exchanges_order_by {
  bybit_key: order_by
  has_bybit_key: order_by
  user_id: order_by
}

"""primary key columns input for table: trading_exchanges"""
input trading_exchanges_pk_columns_input {
  user_id: Int!
}

"""
select columns of table "trading_exchanges"
"""
enum trading_exchanges_select_column {
  """column name"""
  bybit_key

  """column name"""
  user_id
}

"""
input type for updating data in table "trading_exchanges"
"""
input trading_exchanges_set_input {
  bybit_key: String
  user_id: Int
}

"""aggregate stddev on columns"""
type trading_exchanges_stddev_fields {
  user_id: Float
}

"""aggregate stddev_pop on columns"""
type trading_exchanges_stddev_pop_fields {
  user_id: Float
}

"""aggregate stddev_samp on columns"""
type trading_exchanges_stddev_samp_fields {
  user_id: Float
}

"""
Streaming cursor of the table "trading_exchanges"
"""
input trading_exchanges_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: trading_exchanges_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input trading_exchanges_stream_cursor_value_input {
  bybit_key: String
  user_id: Int
}

"""aggregate sum on columns"""
type trading_exchanges_sum_fields {
  user_id: Int
}

"""
update columns of table "trading_exchanges"
"""
enum trading_exchanges_update_column {
  """column name"""
  bybit_key

  """column name"""
  user_id
}

input trading_exchanges_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: trading_exchanges_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: trading_exchanges_set_input

  """filter the rows which have to be updated"""
  where: trading_exchanges_bool_exp!
}

"""aggregate var_pop on columns"""
type trading_exchanges_var_pop_fields {
  user_id: Float
}

"""aggregate var_samp on columns"""
type trading_exchanges_var_samp_fields {
  user_id: Float
}

"""aggregate variance on columns"""
type trading_exchanges_variance_fields {
  user_id: Float
}